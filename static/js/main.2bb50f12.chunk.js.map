{"version":3,"sources":["components/Form.js","components/ToDo.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","value","inputText","onChange","e","setInputText","target","type","onClick","preventDefault","setToDos","toDos","text","completed","id","Math","random","setStatus","name","ToDo","todo","map","item","filter","element","ToDoList","filterToDos","App","useState","status","setFilterToDos","useEffect","getLocal","filterHandler","saveLocalToDos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAuCeA,MArCf,SAAcC,GAgBZ,OACE,8BACE,sBAAKC,UAAU,UAAf,UACE,iCACE,uBAAOC,MAAOF,EAAMG,UAAWC,SAlBhB,SAACC,GAEtBL,EAAMM,aAAaD,EAAEE,OAAOL,QAgBqCM,KAAK,OAAOP,UAAU,eACjF,wBAAQQ,QAfQ,SAACJ,GACvBA,EAAEK,iBACFV,EAAMW,SAAN,sBACOX,EAAMY,OADb,CACoB,CAACC,KAAMb,EAAMG,UAAWW,WAAW,EAAOC,GAAmB,IAAfC,KAAKC,aAEvEjB,EAAMM,aAAa,KAUuBE,KAAK,SAAzC,SACE,mBAAGP,UAAU,4BAGjB,qBAAKA,UAAU,SAAf,SACE,yBAAQG,SAbI,SAACC,GACrBL,EAAMkB,UAAUb,EAAEE,OAAOL,QAYgBiB,KAAK,QAAQlB,UAAU,cAAxD,UACE,wBAAQC,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,cAAd,oC,OCCGkB,MA9Bf,SAAcpB,GAiBV,OACI,sBAAKC,UAAU,OAAf,UACI,oBAAIA,UAAS,oBAAeD,EAAMqB,KAAKP,UAAY,YAAY,IAA/D,SAAsEd,EAAMa,OAC5E,wBAAQJ,QAbQ,WACpBT,EAAMW,SAASX,EAAMY,MAAMU,KAAI,SAAAC,GAC3B,OAAGA,EAAKR,KAAOf,EAAMqB,KAAKN,GACf,2BACAQ,GADP,IACaT,WAAYS,EAAKT,YAG3BS,OAM2BtB,UAAU,eAA5C,SACI,mBAAIA,UAAU,mBAElB,wBAAQQ,QAtBM,WAClBT,EAAMW,SAASX,EAAMY,MAAMY,QACvB,SAACC,GAAD,OAAaA,EAAQV,KAAOf,EAAMqB,KAAKN,QAoBPd,UAAU,YAA1C,SACI,mBAAGA,UAAU,uBCRdyB,MAff,SAAkB1B,GAEhB,OACE,8BACE,qBAAKC,UAAU,iBAAf,SACE,oBAAIA,UAAU,YAAd,SACCD,EAAM2B,YAAYL,KAAI,SAAAD,GAAI,OACvB,cAAC,EAAD,CAAoBR,KAAMQ,EAAKR,KAAMD,MAAOZ,EAAMY,MAAOD,SAAUX,EAAMW,SAAUU,KAAMA,GAA9EA,EAAKN,cCkDba,MAvDf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACN1B,EADM,KACKG,EADL,OAEauB,mBAAS,IAFtB,mBAENjB,EAFM,KAECD,EAFD,OAGekB,mBAAS,OAHxB,mBAGNC,EAHM,KAGEZ,EAHF,OAIyBW,mBAAS,IAJlC,mBAINF,EAJM,KAIOI,EAJP,KAMbC,qBAAU,WACRC,MACC,IACHD,qBAAU,WACTE,IACAC,MACE,CAACvB,EAAOkB,IAEX,IAAMI,EAAgB,WACpB,OAAOJ,GACL,IAAK,YACHC,EAAenB,EAAMY,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKP,cACzC,MACF,IAAK,cACHiB,EAAenB,EAAMY,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKP,cACzC,MACF,QACEiB,EAAenB,KAKfuB,EAAiB,WACnBC,aAAaC,QAAQ,QAASC,KAAKC,UAAU3B,KAE3CqB,EAAW,WACf,GAAqC,OAAlCG,aAAaI,QAAQ,SACtBJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,SAC1C,CACH,IAAIE,EAAYH,KAAKI,MAAMN,aAAaI,QAAQ,UAChD7B,EAAS8B,KAIb,OACE,sBAAKxC,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,uBACA,cAAC,EAAD,CACEW,MAAOA,EACPD,SAAUA,EACVR,UAAWA,EACXG,aAAcA,EACdY,UAAaA,IAEf,cAAC,EAAD,CAAUN,MAAOA,EAAOD,SAAUA,EAAUgB,YAAaA,QC3ChDgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2bb50f12.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Form(props) {\r\n// check onchange from input field\r\nconst inputTextHandler = (e) => {\r\n    \r\n    props.setInputText(e.target.value);\r\n}\r\nconst submitToDoHandler = (e) => {\r\n    e.preventDefault();\r\n    props.setToDos([\r\n        ...props.toDos, {text: props.inputText, completed: false, id: Math.random() *100}\r\n    ]);\r\n    props.setInputText(\"\");\r\n}\r\nconst statusHandler = (e) => {\r\n  props.setStatus(e.target.value)\r\n}\r\n  return (\r\n    <div>\r\n      <div className=\"content\">\r\n        <form>\r\n          <input value={props.inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n          <button onClick={submitToDoHandler} type=\"submit\">\r\n            <i className=\"fas fa-plus-square\" />\r\n          </button>\r\n        </form>\r\n        <div className=\"select\">\r\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nfunction ToDo(props) {\r\n    const deleteHandler = () => {\r\n        props.setToDos(props.toDos.filter(\r\n            (element) => element.id !== props.todo.id\r\n        ))\r\n    };\r\n\r\n    const completeHandler = () => {\r\n        props.setToDos(props.toDos.map(item => {\r\n            if(item.id === props.todo.id){\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                }; \r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${props.todo.completed ? \"completed\":\"\"}`}>{props.text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i  className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React from \"react\";\r\nimport ToDo from \"../components/ToDo\";\r\n\r\nfunction ToDoList(props) {\r\n    \r\n  return (\r\n    <div>\r\n      <div className=\"todo-container\">\r\n        <ul className=\"todo-list\" >\r\n        {props.filterToDos.map(todo => (\r\n            <ToDo key={todo.id} text={todo.text} toDos={props.toDos} setToDos={props.setToDos} todo={todo}/>\r\n        ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import \"./App.css\";\nimport Form from \"./components/Form\";\nimport ToDoList from \"./components/ToDoList\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [toDos, setToDos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filterToDos, setFilterToDos] = useState([]);\n  \n  useEffect(() => {\n    getLocal();\n  }, [])\n  useEffect(() => {\n   filterHandler();\n   saveLocalToDos();\n  }, [toDos, status])\n\n  const filterHandler = () => {\n    switch(status){\n      case \"completed\":\n        setFilterToDos(toDos.filter(todo => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilterToDos(toDos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilterToDos(toDos);\n        break;\n    }\n  }\n  //localStorage\n  const saveLocalToDos = () => {\n      localStorage.setItem('toDos', JSON.stringify(toDos));\n  }\n  const getLocal = () => {\n    if(localStorage.getItem('toDos') === null){\n      localStorage.setItem('toDos', JSON.stringify([]));\n    }else{\n      let todoLocal = JSON.parse(localStorage.getItem(\"toDos\"))\n      setToDos(todoLocal);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">Todo-list</div>\n      <Form\n        toDos={toDos}\n        setToDos={setToDos}\n        inputText={inputText}\n        setInputText={setInputText}\n        setStatus = {setStatus}\n      />\n      <ToDoList toDos={toDos} setToDos={setToDos} filterToDos={filterToDos}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}